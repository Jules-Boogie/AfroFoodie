import * as model from './src/js/model.js';
      import data from './src/data/data.js';
      const main = document.querySelector('.main');
      if (model.state.mode.dark) {
        document.body.classList.add('text-white');
        document.body.style.backgroundColor = "rgb(31, 33, 35)"
      } else {
        document.body.classList.add('bg-white','text-black')
        document.body.classList.remove('text-white');
      }
      
      let currentRecipe;
      model.getRecipes().then(response => {
        function showRecipe() {
          const id = window.location.hash.slice(1);
          let currentRecipe; 
          if(!response){
            currentRecipe = data.recipes[id]
          }else{
            currentRecipe = response[id]
          }
          const markup = `
        <div class="flex flex-wrap md items-center">
        <div class="w-full md:w-1/2 h-full">
          <div class="mx-32 mb-16">
            <h1 class="text-6xl font-bold mt-8">${
              currentRecipe.name
            }</h1>

            <div class="flex font-light">
            ${currentRecipe.tags.map(tag => {
              return `<p class="text-xl font-semibold px-2"> ${tag} </p>`;
            })}
            </div>
            <p class="text-xl font-bold my-4"> By
              <a class="underline" target="_blank" href=${
                currentRecipe.publisher.social
              }> ${currentRecipe.publisher.name} </a>
               </p>

            <div
              class="description w-full sm: md:w-2/3 mt-16 text-sm"
            >
            <h3 class="text-3xl font-bold my-4"> Preparation </h3>
            ${currentRecipe.preparation.map(step => {
              return `
                <p class="text-sm font-semibold pt-2">${step}</p>
              `;
            })}
            </div>
            <div class="description w-full sm: md:w-2/3 mt-16 text-sm">
              <h2 class="text-3xl font-bold my-4"> Ingredients </h2>
              <p class="text-md font-bold my-4"> Serves:
              <a class="underline" target="_blank" href="#"> ${
                currentRecipe.servings
              } </a>
               </p>
              <div>
              ${currentRecipe.ingredients.map(ing => {
                return `<li class="text-md font-semibold pt-2">${ing}</li>`;
              })}
              </div>
            </div>

          </div>
        </div>

        <div class="w-full md:w-1/2 absolute inset-y-0 right-0">
          <div class="slider flex">
            ${currentRecipe.images.map((image, id) => {
              return `<div class="slide inline-flex"> <img
            id="recipe-image"
            src=${image}
            class="object-cover"
            alt=""
          /></div> `;
            })}

          </div>
          <div id="recipe-reviews">
            <h2 class="text-3xl font-bold my-4"> Reviews </h2>
            ${currentRecipe.reviews.map(review => {
              return `
              <div class="pr-4">
              <span class="uppercase">${review.writer}</span>
              <p class="text-sm font-semibold pt-2">${review.review}</p>
            </div>
              `;
            })}

            </div>
        </div>
      </div>
        `;

          main.insertAdjacentHTML('afterbegin', markup);
        }
        showRecipe();
        let currentSlide = 0;

        const slides = document.querySelectorAll('.slide');
        const slider = document.querySelector('.slider');
        const slide = document.querySelector('#recipe-image');

        slider.style.overflow = 'hidden';
        const maxSlide = slides.length;
        const goToSlide = slide => {
          slides.forEach(
            (s, i) => (s.style.transform = `translateX(${100 * (i - slide)}%)`)
          );
        };

        goToSlide(0);

        const nextSlide = () => {
          if (currentSlide < maxSlide - 1) {
            currentSlide++;
          } else if (currentSlide == maxSlide - 1) {
            currentSlide = 0;
          } else if (currentSlide === 0) {
            currentSlide = maxSlide - 1;
          }
          goToSlide(currentSlide);
        };

        //next slide
        setInterval(() => {
          nextSlide();
        }, 5000);
      });